class Car():
	"""Простая модель автомобиля."""
	def __init__(self, make, model, year):
		"""Инициализирует атрибуты описания автомобиля."""
		self.make = make
		self.model = model
		self.year = year
		self.odometer_reading = 0

	def get_descriptive_name(self):
		"""Возвращает аккуратно отформатированное описание."""
		long_name = str(self.year) + ' ' + self.make + ' ' + self.model
		return long_name.title()
		
	def read_odometer(self):
		"""выводит пробег"""
		print("This car has " + str(self.odometer_reading) + " miles on it.")

	def update_odometer(self, mileage):
		"""устанавливает значение одометра"""
		"""при попытке скрутить пробег, не дает этого сделать"""
		if mileage >= self.odometer_reading:
			self.odometer_reading = mileage
		else:
			print("You can't roll back an odometer")
			
	def increment_odometer(self, miles):
		self.odometer_reading += miles
	
my_new_car = Car('audi', 'a4', 2016)
print(my_new_car.get_descriptive_name())
my_new_car.update_odometer(23)
my_new_car.read_odometer()

class Battery():
	def __init__(self, battery_size=70):
		self.battery_size = battery_size
		
	def describe_battery(self):
		print("This car has a " + str(self.battery_size) + "-kWh battery.")
		
	def upgrade_battery(self, battery_size):
		if battery_size == 85:
				self.battery_size = battery_size
				message_full = "Full charge"
				print(message_full)
		else:
				self.battery_size = 85
				message = "upgraded on 85"
				print(message)
				
	def get_range(self):
		if self.battery_size == 70:
			range = 240
		elif self.battery_size == 85:
			range = 270
		
		message = "This car can go approximately " + str(range)
		message += " miles on a full charge."
		print(message)

class ElectricCar(Car):

	def __init__(self, make, model, year):
		super().__init__(make, model, year)
		self.battery = Battery()
		
	def describe_battery(self):
		print("This car has a " + str(self.battery_size) + "-kWh battery.")
		
my_tesla = ElectricCar('tesla', 'model s', 2016)
print(my_tesla.get_descriptive_name())
my_tesla.battery.describe_battery()
my_tesla.battery.get_range()

him_tesla = ElectricCar('tesla', 'model h', 2019)
print(him_tesla.get_descriptive_name())
him_tesla.battery.describe_battery()
him_tesla.battery.get_range()
him_tesla.battery.upgrade_battery(70)
him_tesla.battery.get_range()

my_old_car = Car('daewoo', 'nexia', 2008) 
print(my_old_car.get_descriptive_name())
print(my_old_car.read_odometer())

		